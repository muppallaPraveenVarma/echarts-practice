{"version":3,"file":"DeclarationMetadata.js","sourceRoot":"","sources":["../../src/collector/DeclarationMetadata.ts"],"names":[],"mappings":";AAAA,4FAA4F;AAC5F,2DAA2D;;AAG3D,wEAA4D;AAC5D,iDAA8C;AAE9C,oEAA6D;AAE7D,MAAa,mBAAmB;IAAhC;QACE;;;WAGG;QACI,iBAAY,GAAiC,SAAS,CAAC;QAE9D;;;WAGG;QACI,uBAAkB,GAAoC,SAAS,CAAC;QAEvE;;WAEG;QACI,uBAAkB,GAAe,gCAAU,CAAC,IAAI,CAAC;QAExD;;;;;WAKG;QACI,wBAAmB,GAAe,gCAAU,CAAC,IAAI,CAAC;QAEzD,sFAAsF;QACtF,0EAA0E;QACnE,oBAAe,GAAY,KAAK,CAAC;QACjC,eAAU,GAAY,KAAK,CAAC;QAC5B,aAAQ,GAAY,KAAK,CAAC;QAC1B,cAAS,GAAY,KAAK,CAAC;QAE3B,kBAAa,GAAY,KAAK,CAAC;QAEtC,iCAAiC;QAC1B,uBAAkB,GAAY,IAAI,CAAC;QAE1C,+DAA+D;QACxD,2BAAsB,GAAY,KAAK,CAAC;QAExC,mCAA8B,GAAiB,2BAAY,CAAC,SAAS,CAAC;QAE7E;;WAEG;QACI,gBAAW,GAAY,KAAK,CAAC;QAEpC;;;;;;WAMG;QACI,0BAAqB,GAAqB,EAAE,CAAC;IAwBtD,CAAC;IAtBQ,uBAAuB,CAAC,gBAAgC;QAC7D,MAAM,aAAa,GAAwB,gBAAgB,CAAC,QAA+B,CAAC;QAE5F,IAAI,CAAC,aAAa,EAAE;YAClB,MAAM,IAAI,iCAAa,CAAC,sFAAsF,CAAC,CAAC;SACjH;QAED,IAAI,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE;YAC7D,OAAO,CAAE,gBAAgB;SAC1B;QAED,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,MAAM,IAAI,iCAAa,CAAC,kFAAkF,CAAC,CAAC;SAC7G;QAED,IAAI,aAAa,CAAC,WAAW,EAAE;YAC7B,MAAM,IAAI,iCAAa,CAAC,sGAAsG,CAAC,CAAC;SACjI;QAED,aAAa,CAAC,WAAW,GAAG,IAAI,CAAC;QACjC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACpD,CAAC;CACF;AA/ED,kDA+EC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\r\n// See LICENSE in the project root for license information.\r\n\r\nimport * as tsdoc from '@microsoft/tsdoc';\r\nimport { ReleaseTag } from '@microsoft/api-extractor-model';\r\nimport { VisitorState } from './VisitorState';\r\nimport { AstDeclaration } from '../analyzer/AstDeclaration';\r\nimport { InternalError } from '@microsoft/node-core-library';\r\n\r\nexport class DeclarationMetadata {\r\n  /**\r\n   * This is the original TSDoc comment parsed from the source code.\r\n   * It may be modified (or constructed artificially) by the DocCommentEnhancer.\r\n   */\r\n  public tsdocComment: tsdoc.DocComment | undefined = undefined;\r\n\r\n  /**\r\n   * The ParserContext from when the TSDoc comment was parsed from the source code.\r\n   * If the source code did not contain a doc comment, then this will be undefined.\r\n   */\r\n  public tsdocParserContext: tsdoc.ParserContext | undefined = undefined;\r\n\r\n  /**\r\n   * This is the release tag that was explicitly specified in the original doc comment, if any.\r\n   */\r\n  public declaredReleaseTag: ReleaseTag = ReleaseTag.None;\r\n\r\n  /**\r\n   * The \"effective\" release tag is a normalized value that is based on `declaredReleaseTag`,\r\n   * but may be inherited from a parent, or corrected if the declared value was somehow invalid.\r\n   * When actually trimming .d.ts files or generating docs, API Extractor uses the \"effective\" value\r\n   * instead of the \"declared\" value.\r\n   */\r\n  public effectiveReleaseTag: ReleaseTag = ReleaseTag.None;\r\n\r\n  // NOTE: In the future, the Collector may infer or error-correct some of these states.\r\n  // Generators should rely on these instead of tsdocComment.modifierTagSet.\r\n  public isEventProperty: boolean = false;\r\n  public isOverride: boolean = false;\r\n  public isSealed: boolean = false;\r\n  public isVirtual: boolean = false;\r\n\r\n  public isPreapproved: boolean = false;\r\n\r\n  // Assigned by DocCommentEnhancer\r\n  public needsDocumentation: boolean = true;\r\n\r\n  // If true, then it would be redundant to show this release tag\r\n  public releaseTagSameAsParent: boolean = false;\r\n\r\n  public docCommentEnhancerVisitorState: VisitorState = VisitorState.Unvisited;\r\n\r\n  /**\r\n   * If true, then this declaration is treated as part of another declaration.\r\n   */\r\n  public isAncillary: boolean = false;\r\n\r\n  /**\r\n   * A list of other declarations that are treated as being part of this declaration.  For example, a property\r\n   * getter/setter pair will be treated as a single API item, with the setter being treated as ancillary to the getter.\r\n   *\r\n   * If the `ancillaryDeclarations` array is non-empty, then `isAncillary` will be false for this declaration,\r\n   * and `isAncillary` will be true for all the array items.\r\n   */\r\n  public ancillaryDeclarations: AstDeclaration[] = [];\r\n\r\n  public addAncillaryDeclaration(otherDeclaration: AstDeclaration): void {\r\n    const otherMetadata: DeclarationMetadata = otherDeclaration.metadata as DeclarationMetadata;\r\n\r\n    if (!otherMetadata) {\r\n      throw new InternalError('addAncillaryDeclaration() cannot be called before the declaration metadata is solved');\r\n    }\r\n\r\n    if (this.ancillaryDeclarations.indexOf(otherDeclaration) >= 0) {\r\n      return;  // already added\r\n    }\r\n\r\n    if (this.isAncillary) {\r\n      throw new InternalError('Invalid call to addAncillaryDeclaration() because the target is ancillary itself');\r\n    }\r\n\r\n    if (otherMetadata.isAncillary) {\r\n      throw new InternalError('Invalid call to addAncillaryDeclaration() because source is already ancillary to another declaration');\r\n    }\r\n\r\n    otherMetadata.isAncillary = true;\r\n    this.ancillaryDeclarations.push(otherDeclaration);\r\n  }\r\n}\r\n"]}